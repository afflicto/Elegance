(function() {
  Elegance.RESTDriver = (function() {
    function RESTDriver(app, apiURL) {
      this.app = app;
      this.apiURL = apiURL;
      if (!(this.app instanceof Elegance.App)) {
        throw new Error("Argument 1, app must be of type Elegance.App");
      }
      if (typeof this.apiURL !== 'string') {
        throw new Error("Argument 2, apiURL must be of type string");
      }
    }

    RESTDriver.prototype.ajax = function(method, data, callback) {
      var url;
      url = this.apiURL;
      if (method === 'get') {
        url += '/' + data.join('/');
        data = [];
      }
      return $.ajax(url, {
        method: method.toUpperCase(),
        success: callback,
        error: this.error,
        dataType: 'json',
        data: data
      });
    };

    RESTDriver.prototype.error = function(data, error) {
      throw new Error("RESTDriver ajax error: " + error);
    };

    RESTDriver.prototype.find = function(type, id, callback) {
      return this.ajax('get', [type, id], (function(_this) {
        return function(response, status) {
          return callback(response.records[0]);
        };
      })(this));
    };

    RESTDriver.prototype.fetch = function(type, page, callback) {
      return this.ajax('get', [type, 'page', page], (function(_this) {
        return function(response, status) {
          return callback(response.records);
        };
      })(this));
    };

    RESTDriver.prototype.count = function(type, callback) {
      return this.ajax('get', [type, 'count'], (function(_this) {
        return function(response, status) {
          return callback(response.count);
        };
      })(this));
    };

    return RESTDriver;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0b3JlL1JFU1REcml2ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsRUFBTSxRQUFRLENBQUM7QUFDRCxJQUFBLG9CQUFDLEdBQUQsRUFBTyxNQUFQLEdBQUE7QUFDWixNQURhLElBQUMsQ0FBQSxNQUFELEdBQ2IsQ0FBQTtBQUFBLE1BRG1CLElBQUMsQ0FBQSxTQUFELE1BQ25CLENBQUE7QUFBQSxNQUFBLElBQUEsQ0FBQSxDQUFPLElBQUMsQ0FBQSxHQUFELFlBQWdCLFFBQVEsQ0FBQyxHQUFoQyxDQUFBO0FBQ0MsY0FBVSxJQUFBLEtBQUEsQ0FBTSw4Q0FBTixDQUFWLENBREQ7T0FBQTtBQUVBLE1BQUEsSUFBTyxNQUFBLENBQUEsSUFBUSxDQUFBLE1BQVIsS0FBa0IsUUFBekI7QUFDQyxjQUFVLElBQUEsS0FBQSxDQUFNLDJDQUFOLENBQVYsQ0FERDtPQUhZO0lBQUEsQ0FBYjs7QUFBQSx5QkFNQSxJQUFBLEdBQU0sU0FBQyxNQUFELEVBQVMsSUFBVCxFQUFlLFFBQWYsR0FBQTtBQUNMLFVBQUEsR0FBQTtBQUFBLE1BQUEsR0FBQSxHQUFNLElBQUMsQ0FBQSxNQUFQLENBQUE7QUFDQSxNQUFBLElBQUcsTUFBQSxLQUFVLEtBQWI7QUFDQyxRQUFBLEdBQUEsSUFBTyxHQUFBLEdBQU0sSUFBSSxDQUFDLElBQUwsQ0FBVSxHQUFWLENBQWIsQ0FBQTtBQUFBLFFBQ0EsSUFBQSxHQUFPLEVBRFAsQ0FERDtPQURBO2FBSUEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxHQUFQLEVBQ0M7QUFBQSxRQUFBLE1BQUEsRUFBUSxNQUFNLENBQUMsV0FBUCxDQUFBLENBQVI7QUFBQSxRQUNBLE9BQUEsRUFBUyxRQURUO0FBQUEsUUFFQSxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBRlI7QUFBQSxRQUdBLFFBQUEsRUFBVSxNQUhWO0FBQUEsUUFJQSxJQUFBLEVBQU0sSUFKTjtPQURELEVBTEs7SUFBQSxDQU5OLENBQUE7O0FBQUEseUJBa0JBLEtBQUEsR0FBTyxTQUFDLElBQUQsRUFBTyxLQUFQLEdBQUE7QUFDTixZQUFVLElBQUEsS0FBQSxDQUFNLHlCQUFBLEdBQTRCLEtBQWxDLENBQVYsQ0FETTtJQUFBLENBbEJQLENBQUE7O0FBQUEseUJBcUJBLElBQUEsR0FBTSxTQUFDLElBQUQsRUFBTyxFQUFQLEVBQVcsUUFBWCxHQUFBO2FBQ0wsSUFBQyxDQUFBLElBQUQsQ0FBTSxLQUFOLEVBQWEsQ0FBQyxJQUFELEVBQU8sRUFBUCxDQUFiLEVBQXlCLENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFDLFFBQUQsRUFBVyxNQUFYLEdBQUE7aUJBQ3hCLFFBQUEsQ0FBUyxRQUFRLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBMUIsRUFEd0I7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF6QixFQURLO0lBQUEsQ0FyQk4sQ0FBQTs7QUFBQSx5QkF5QkEsS0FBQSxHQUFPLFNBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxRQUFiLEdBQUE7YUFDTixJQUFDLENBQUEsSUFBRCxDQUFNLEtBQU4sRUFBYSxDQUFDLElBQUQsRUFBTyxNQUFQLEVBQWUsSUFBZixDQUFiLEVBQW1DLENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFDLFFBQUQsRUFBVyxNQUFYLEdBQUE7aUJBQ2xDLFFBQUEsQ0FBUyxRQUFRLENBQUMsT0FBbEIsRUFEa0M7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFuQyxFQURNO0lBQUEsQ0F6QlAsQ0FBQTs7QUFBQSx5QkE2QkEsS0FBQSxHQUFPLFNBQUMsSUFBRCxFQUFPLFFBQVAsR0FBQTthQUNOLElBQUMsQ0FBQSxJQUFELENBQU0sS0FBTixFQUFhLENBQUMsSUFBRCxFQUFPLE9BQVAsQ0FBYixFQUE4QixDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQyxRQUFELEVBQVcsTUFBWCxHQUFBO2lCQUM3QixRQUFBLENBQVMsUUFBUSxDQUFDLEtBQWxCLEVBRDZCO1FBQUEsRUFBQTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBOUIsRUFETTtJQUFBLENBN0JQLENBQUE7O3NCQUFBOztNQURELENBQUE7QUFBQSIsImZpbGUiOiJTdG9yZS9SRVNURHJpdmVyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRWxlZ2FuY2UuUkVTVERyaXZlclxyXG5cdGNvbnN0cnVjdG9yOiAoQGFwcCwgQGFwaVVSTCkgLT5cclxuXHRcdHVubGVzcyBAYXBwIGluc3RhbmNlb2YgRWxlZ2FuY2UuQXBwXHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkFyZ3VtZW50IDEsIGFwcCBtdXN0IGJlIG9mIHR5cGUgRWxlZ2FuY2UuQXBwXCIpXHJcblx0XHR1bmxlc3MgdHlwZW9mIEBhcGlVUkwgPT0gJ3N0cmluZydcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgMiwgYXBpVVJMIG11c3QgYmUgb2YgdHlwZSBzdHJpbmdcIilcclxuXHJcblx0YWpheDogKG1ldGhvZCwgZGF0YSwgY2FsbGJhY2spIC0+XHJcblx0XHR1cmwgPSBAYXBpVVJMXHJcblx0XHRpZiBtZXRob2QgaXMgJ2dldCdcclxuXHRcdFx0dXJsICs9ICcvJyArIGRhdGEuam9pbiAnLydcclxuXHRcdFx0ZGF0YSA9IFtdXHJcblx0XHQkLmFqYXggdXJsLCBcclxuXHRcdFx0bWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKVxyXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xyXG5cdFx0XHRlcnJvcjogQGVycm9yXHJcblx0XHRcdGRhdGFUeXBlOiAnanNvbidcclxuXHRcdFx0ZGF0YTogZGF0YVxyXG5cclxuXHRlcnJvcjogKGRhdGEsIGVycm9yKSAtPlxyXG5cdFx0dGhyb3cgbmV3IEVycm9yIFwiUkVTVERyaXZlciBhamF4IGVycm9yOiBcIiArIGVycm9yXHJcblxyXG5cdGZpbmQ6ICh0eXBlLCBpZCwgY2FsbGJhY2spIC0+XHJcblx0XHRAYWpheCAnZ2V0JywgW3R5cGUsIGlkXSwgKHJlc3BvbnNlLCBzdGF0dXMpID0+XHJcblx0XHRcdGNhbGxiYWNrIHJlc3BvbnNlLnJlY29yZHNbMF1cclxuXHJcblx0ZmV0Y2g6ICh0eXBlLCBwYWdlLCBjYWxsYmFjaykgLT5cclxuXHRcdEBhamF4ICdnZXQnLCBbdHlwZSwgJ3BhZ2UnLCBwYWdlXSwgKHJlc3BvbnNlLCBzdGF0dXMpID0+XHJcblx0XHRcdGNhbGxiYWNrIHJlc3BvbnNlLnJlY29yZHNcclxuXHJcblx0Y291bnQ6ICh0eXBlLCBjYWxsYmFjaykgLT5cclxuXHRcdEBhamF4ICdnZXQnLCBbdHlwZSwgJ2NvdW50J10sIChyZXNwb25zZSwgc3RhdHVzKSA9PlxyXG5cdFx0XHRjYWxsYmFjayByZXNwb25zZS5jb3VudCJdfQ==