(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Elegance.Controller = (function() {
    Controller.prototype.events = {};

    function Controller(app, route) {
      var event, method, ref, selector;
      this.app = app;
      this.route = route;
      this.onDataChange = bind(this.onDataChange, this);
      this.element = null;
      this.initialized = false;
      this.data = null;
      this.listeners = [];
      this.dirty = false;
      this.app = this.app;
      this.element = $("#" + this.route.name).first();
      if (this.element.length === 0) {
        this.element = null;
        throw new Error("Controller " + this.constructor.name + " has no template element.\r Create an element with an id of '" + this.route.name + "'.");
      } else {
        this.element.hide();
        ref = this.events;
        for (event in ref) {
          if (!hasProp.call(ref, event)) continue;
          method = ref[event];
          event = event.split(' ');
          selector = event.pop();
          event = event[0];
          this.bindEvent(this.element, event, selector, this[method]);
        }
      }
    }

    Controller.prototype.bindEvent = function(container, event, selector, method) {
      var callback, self;
      if (event === 'submit') {
        self = this;
        callback = function(e) {
          var child, children, i, input, len, name, tag;
          e.preventDefault();
          input = {};
          children = $(this).find('input, select, textarea');
          for (i = 0, len = children.length; i < len; i++) {
            child = children[i];
            child = $(child);
            name = child.attr('name');
            if (name != null) {
              tag = child.prop('tagName');
              tag = tag.toLowerCase();
              if (tag === 'input' || tag === 'textarea') {
                input[name] = child.val();
              }
            }
          }
          return method(input);
        };
        return container.on(event, selector, callback);
      } else {
        return container.on(event, selector, method);
      }
    };

    Controller.prototype.setData = function(data) {
      if (this.data != null) {
        this.data.off('change', this.listeners);
        this.listeners = [];
      }
      this.data = data;
      if (this.data != null) {
        this.listeners.push(this.data.on('change', this.onDataChange));
      }
      return this.onDataChange();
    };

    Controller.prototype.onDataChange = function() {
      if (this.isShown()) {
        return this.render();
      } else {
        return this.dirty = true;
      }
    };

    Controller.prototype.init = function() {
      return this.initialized = true;
    };

    Controller.prototype.isShown = function() {
      if (this.element != null) {
        if (this.element.css('display') === 'none') {
          return false;
        }
        return true;
      }
      return false;
    };

    Controller.prototype.show = function() {
      if (this.element != null) {
        if (this.dirty) {
          this.render();
          this.dirty = false;
        }
        return this.element.show();
      }
    };

    Controller.prototype.hide = function() {
      console.log('hiding controller');
      if (this.element) {
        return this.element.hide();
      }
    };

    Controller.prototype.render = function() {
      return this.app.render(this.element, this.data);
    };

    return Controller;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,