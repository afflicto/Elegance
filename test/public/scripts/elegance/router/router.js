(function() {
  Elegance.Router = (function() {
    Router.prototype.controllers = [];

    function Router(app) {
      var self;
      this.app = app;
      this.routes = [];
      this.current = null;
      this.currentURI = null;
      if (!(this.app instanceof Elegance.App)) {
        throw new Error('app must be an instance of Elegance.App!');
      }
      self = this;
      $('a').on('click', function(e) {
        var attr;
        attr = $(this).attr('href');
        if ((attr != null) === false) {

        } else if (attr.charAt(0) === "#") {

        } else if (/^https?/.test(attr)) {

        } else {
          e.preventDefault();
          return self.navigate(attr);
        }
      });
    }

    Router.prototype.setRootURL = function(rootURL) {
      this.rootURL = rootURL;
      return this.rootURL.replace(/^https?:\/\//, '');
    };

    Router.prototype.redirect = function(path1) {
      this.path = path1;
      return new Elegance.Router.Redirect(this.path);
    };

    Router.prototype.navigate = function(path, pushState) {
      var i, len, ref, route, value;
      if (pushState == null) {
        pushState = true;
      }
      console.log("navigate, raw path:'" + path + "'");
      path = path.replace(/^\/{2,}/, '').replace(/\/{2,}$/, '');
      if (path === '') {
        path = '/';
      }
      if (path === this.currentURI) {
        return false;
      }
      ref = this.routes;
      for (i = 0, len = ref.length; i < len; i++) {
        route = ref[i];
        if (route.matches(path)) {
          console.log('matches');
          if (route.target instanceof Elegance.Controller) {
            if (this.current !== null) {
              if (this.current.target instanceof Elegance.Controller) {
                if (this.current.target !== route.target) {
                  this.current.target.hide();
                }
              }
            }
            if (!route.target.initialized) {
              route.target.init();
            }
            value = route.target.show.apply(route.target, route.extractParameters(path));
            if (pushState) {
              window.history.pushState(path, path, this.rootURL + path);
            }
            this.currentURI = path;
            return this.current = route;
          }
        }
      }
      return console.log("404 Not Found (" + path + ")");
    };

    Router.prototype.map = function(callback) {
      var i, len, ref, route, target;
      callback.apply(this);
      console.log('__________routes___________');
      ref = this.routes;
      for (i = 0, len = ref.length; i < len; i++) {
        route = ref[i];
        if (route.target instanceof Elegance.Controller) {
          target = route.target.constructor.name;
        } else {
          target = null;
        }
        console.log("'" + route.path + "' -> " + route.name + " (target: " + target + ")");
      }
      return console.log('---------------------------');
    };

    Router.prototype.resource = function(name, path, target) {
      if (target == null) {
        target = null;
      }
      return this.routes.push(new Elegance.Router.Route(this.app, name, path, target));
    };

    Router.prototype.init = function() {
      var path;
      path = window.location.href.replace(this.rootURL, '');
      this.navigate(path, false);
      return $(window).bind('popstate', (function(_this) {
        return function(e) {
          path = e.originalEvent.state;
          return _this.navigate(path, false);
        };
      })(this));
    };

    return Router;

  })();

  Elegance.registerModule('router', Elegance.Router);

}).call(this);

//# sourceMappingURL=data:application/json;base64,